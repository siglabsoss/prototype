sparseData = [14257318, 14271749, 14320517, 14322629, 14339141, 14353349, 14361029, 14375813, 14382149, 14396357, 14402309, 14417477, 14424005, 14438981, 14445125, 14459333, 14466437, 14481029, 14488133, 14502341, 14507909, 14510021, 14853509, 15069893, 15113093, 15265349, 15323525, 15439493, 15466373, 15508037, 15513989, 15540101, 15645125, 15703301, 15750917, 15762053, 15893957, 15915269, 15995141, 16030661, 16157765, 16205573, 16310597, 16389893, 16432517, 16443269, 16469381, 16595717, 16632581, 16675589, 16690949, 16706309, 16754117, 16854917, 16939589, 16944197, 16987013, 17061701, 17382149, 17578565, 17789381, 17921285, 18180293, 18248645, 18317573, 18349637, 18455621, 18497093, 18644741, 18750341, 18808901, 18856325, 18924293, 18930437, 19104197, 19188677, 19246853, 19389701, 19405253, 19626245, 19733381, 19764293, 19801157, 20022725, 20149829, 20345093, 20529413, 20736581, 20893637, 20963525, 21005765, 21110213, 21179141, 21427781, 21648581, 21681413, 21696773, 21733445, 21787397, 21881669, 22081925, 22098245, 22108229, 22261829, 22409285, 22414085, 22441349, 22621061, 22821125, 22979525, 23011781, 23091269, 23260037, 23392133, 23466245, 23496965, 23598149, 23661125, 23687621, 23739653, 23962181, 24083333, 24135941, 24268229, 24395141, 24558725, 24653573, 24771653, 24868229, 24870341, 24900293, 24902597, 24906629, 24908741, 24916613, 24917957, 24925061, 24926789, 24933125, 24934853, 24974213, 24976325, 24986693, 24988613, 25006853, 25008389, 25040645, 25042373, 25047941, 25050053, 25069637, 25071557, 25169669, 25171205, 25212677, 25214405, 25223429, 25225157, 25241669, 25243973, 25251077, 25252805, 25258181, 25260485, 25265093, 25266245, 25269125, 25271237, 25281605, 25283909, 25295237, 25297349, 25303109, 25305221, 25319621, 25321733, 25344389, 25346501, 25350917, 25352261, 25353797, 25355717, 25359557, 25363397, 25370501, 25372613, 25379909, 25381829, 25386245, 25389893, 25398533, 25400261, 25408901, 25411205, 25418309, 25420613, 25424261, 25427717, 25434821, 25437125, 25444229, 25447877, 25451909, 25453829, 25454981, 25456709, 25460933, 25464389, 25468805, 25470917, 25481093, 25484741, 25488773, 25491077, 25491845, 25493765, 25498373, 25500101, 25510277, 25512389, 25517957, 25520069, 25526405, 25529093, 25533701, 25535813, 25539653, 25541573, 25557893, 25559813, 25565573, 25567685, 25579397, 25581509, 25591685, 25593797, 25602821, 25604357, 25623941, 25626053, 25636229, 25638341, 25644293, 25646021, 25650053, 25651589, 25653701, 25655237, 25663877, 25665797, 25670213, 25672517, 25673093, 25675013, 25680773, 25682885, 25708421, 25710341, 25714757, 25716677, 25729925, 25732037, 25740869, 25742405, 25746821, 25748933, 25765253, 25767365, 25772933, 25775045, 25779461, 25780997, 25795973, 25798085, 25806725, 25809029, 25812869, 25814981, 25818821, 25820933, 25826693, 25828229, 25832837, 25834949, 25851461, 25853189, 25862021, 25865669, 25869701, 25871813, 25886789, 25889093, 25900805, 25904069, 25914245, 25916165, 25918853, 25920965, 25928261, 25930181, 25937285, 25939397, 25942085, 25944005, 25960325, 25962245, 25969349, 25971653, 25978757, 25980869, 25985669, 25987013, 25997381, 25999685, 26004677, 26006981, 26021765, 26023685, 26047877, 26049989, 26052869, 26054597, 26068037, 26070341, 26074373, 26076101, 26081669, 26083781, 26086853, 26088389, 26093957, 26095685, 26100101, 26102213, 26116997, 26118725, 26121605, 26123717, 26129477, 26131013, 26136965, 26138885, 26143493, 26145221, 26152709, 26154053, 26160005, 26162309, 26169413, 26170949, 26175365, 26178821, 26193797, 26195909, 26204549, 26207045, 26210885, 26212421, 26216645, 26218949, 26224517, 26226053, 26229125, 26230853, 26235269, 26237573, 26250629, 26252741, 26261765, 26263493, 26265989, 26268101, 26270597, 26272325, 26273861, 26275397, 26281349, 26283461, 26297093, 26298821, 26304389, 26308229, 26316677, 26318789, 26324741, 26326277, 26335109, 26337221, 26341445, 26343557, 26347397, 26349509, 26360069, 26361797, 26371973, 26374085, 26378885, 26380229, 26390597, 26394053, 26397893, 26400197, 26407301, 26409413, 26439557, 26441285, 26445701, 26447813, 26450693, 26452229, 26454917, 26456837, 26466053, 26467781, 26471813, 26473925, 26487173, 26489477, 26491781, 26494277, 26508485, 26510789, 26512133, 26513861, 26514821, 26516549, 26521157, 26523077, 26533253, 26535365, 26542853, 26544581, 26545925, 26547653, 26554757, 26556869, 26561093, 26562821, 26581253, 26582981, 26588549, 26590853, 26596613, 26598149, 26614469, 26616773, 26620805, 26622533, 26631557, 26633477, 26637893, 26640197, 26642501, 26644421, 26654597, 26656709, 26657861, 26659781, 26668613, 26670725, 26682629, 26684357, 26692997, 26696645, 26703749, 26706053, 26711237, 26713349, 26716421, 26718149, 26725253, 26727365, 26734469, 26736773, 26745221, 26747333, 26754437, 26756549, 26760965, 26764229, 26786501, 26788613, 26793221, 26794565, 26796293, 26798021, 26800517, 26802629, 26812805, 26814725, 26820677, 26822213, 26823941, 26825669, 26828549, 26830277, 26836229, 26837957, 26845061, 26846789, 26851205, 26853317, 26857541, 26859461, 26873285, 26874821, 26878085, 26880965, 26885189, 26887493, 26896133, 26897861];
%sparseData = [0, 15, 16, 17, 19, 30];

sparseComb = [0, 343200, 559680, 601920, 755040, 813120, 929280, 955680, 997920, 1003200, 1029600, 1135200, 1193280, 1240800, 1251360, 1383360, 1404480, 1483680, 1520640, 1647360, 1694880, 1800480, 1879680, 1921920, 1932480, 1958880, 2085600, 2122560, 2164800, 2180640, 2196480, 2244000, 2344320, 2428800, 2434080, 2476320, 2550240, 2872320, 3067680, 3278880, 3410880, 3669600, 3738240, 3806880, 3838560, 3944160, 3986400, 4134240, 4239840, 4297920, 4345440, 4414080, 4419360, 4593600, 4678080, 4736160, 4878720, 4894560, 5116320, 5221920, 5253600, 5290560, 5512320, 5639040, 5834400, 6019200, 6225120, 6383520, 6452160, 6494400, 6600000, 6668640, 6916800, 7138560, 7170240, 7186080, 7223040, 7275840, 7370880, 7571520, 7587360, 7597920, 7751040, 7898880, 7904160, 7930560, 8110080, 8310720, 8469120, 8500800, 8580000, 8748960, 8880960, 8954880, 8986560, 9086880, 9150240, 9176640, 9229440, 9451200, 9572640, 9625440, 9757440, 9884160, 10047840, 10142880, 10243200];
%sparseComb = [0,1,2,4,8];


denseComb = toDense(sparseComb);
%denseComb = [1,-1,1,1,-1,-1,-1,-1,-1];

denseData = toDense(sparseData);
denseSize = size(denseData,2);

% shorter vector is 0 padded to make it the same size as larger
% result is 2N - 1 samples
c = xcorr(denseData, denseComb);

[maxVal, maxIndex] = max(c);
[minVal, minIndex] = min(c);

if maxVal > abs(minVal)
	result = maxIndex;
else
	result = minIndex;
	c = c .* -1;  % flip graph so it will always show "taller is better"
end

% we assume dense is larger than comb
% the result is the largest peak, minus half (due to properties of xcor), plus the first value of the sparseData vector (because we subtracted this when we built the dense vector)
result = result - denseSize + sparseData(1);

disp(sprintf('Result %d', result));



%t = 1+sparseData(1):cc+sparseData(1);

%close all
figure;

plot(c); 