"""Module docstring.This serves as a long usage message."""import sysimport getoptfrom subprocess import callimport randomimport oskeybase = 'testkey'def keyname():    return keybase+'.pchk'def genname():    return keybase+'.gen'def filebase(length):    filebasen = 'testfile'    return filebasen + '_kval_' + str(length);def encodedFileName(length):    return filebase(length)+'.encoded'def rawFileName(length):    return filebase(length)+'.raw'def receivedFileName(length):    return filebase(length)+'.received'def extractedFileName(length):    return filebase(length)+'.extracted'def decodedFileName(length):    return filebase(length)+'.decoded'def genLdpc(klen, length, random, ones):    argList = [keyname(), length-klen, length, random, 'evenboth', ones, 'no4cycle'];    args = ' '.join([str(x) for x in argList])    os.system('./make-ldpc ' + args)def makeGen():    argList = [keyname(), genname(), 'sparse'];    args = ' '.join([str(x) for x in argList])    os.system('./make-gen ' + args)def encode(klen, length):    print 'Encoding file with name: ' + rawFileName(klen)    argList = [keyname(), genname(), rawFileName(klen), encodedFileName(klen)];    args = ' '.join([str(x) for x in argList])    os.system('./encode ' + args)def transmit():    argList = [keyname(), genname(), 'sparse'];    args = ' '.join([str(x) for x in argList])    os.system('./make-gen ' + args)def runonce(klen, length, random, ones, noise):    genLdpc(klen, length, random, ones)    makeGen()    encode(klen, length)def iterate(a,b):    print a    call('./make-ldpc')def main():    # Run with a message length of k    k = 24    # Coded block size of n    n = 240    # Noise is a value from 0 to 1    noise = 0.01    # Seed with the same    random.seed(42)    runonce(k, n, random.randint(0,10000), 20, noise)    return    # parse command line options    try:        opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])    except getopt.error, msg:        print msg        print "for help use --help"        sys.exit(2)    # process options    for o, a in opts:        if o in ("-h", "--help"):            print __doc__            sys.exit(0)    # process arguments    for arg in args:        process(arg)if __name__ == "__main__":    main()